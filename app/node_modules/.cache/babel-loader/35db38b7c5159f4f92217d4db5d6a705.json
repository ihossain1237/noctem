{"ast":null,"code":"import _isObject from \"lodash/isObject\";\nimport * as _prettier from 'prettier/standalone';\nimport 'prettier/parser-babylon';\nimport 'prettier/parser-html';\nimport 'prettier/parser-typescript'; // `prettier` is a CJS library, there are known issues with them:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\n\nvar prettier = _prettier.default || _prettier;\nvar prettierConfig = {\n  htmlWhitespaceSensitivity: 'ignore',\n  printWidth: 100,\n  tabWidth: 2,\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'all',\n  plugins: typeof window !== 'undefined' ? window.prettierPlugins : []\n};\n\nvar normalizeToString = function normalizeToString(value) {\n  if (Array.isArray(value)) return value.join('\\n');\n  return _isObject(value) ? JSON.stringify(value, null, 2) : value;\n};\n\nexport var prettifyCode = function prettifyCode(code, parser) {\n  var formatted = prettier.format(code, Object.assign({}, prettierConfig, {\n    // a narrower print width is more friendly to doc examples\n    parser: parser\n  }));\n  return formatted.replace(/^;</m, '<'); // remove beginning semi in JSX/HTML\n};\nvar formatters = {\n  bash: function bash() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return val.replace(/^/g, '$  ');\n  },\n  json: function json(val) {\n    return prettifyCode(val, 'json');\n  },\n  js: function js() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  jsx: function jsx() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  html: function html() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'html');\n  }\n};\nexport var formatCode = function formatCode(code, mode) {\n  if (!code) return '';\n  var formatter = formatters[mode];\n  return formatter(normalizeToString(code)) // remove eof line break, they are not helpful for snippets\n  .replace(/\\n$/, '');\n};","map":null,"metadata":{},"sourceType":"module"}